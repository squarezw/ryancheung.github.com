<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rails | Ryan's Blog]]></title>
  <link href="http://ryancheung.github.com/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://ryancheung.github.com/"/>
  <updated>2012-11-12T00:04:43+08:00</updated>
  <id>http://ryancheung.github.com/</id>
  <author>
    <name><![CDATA[Ryan Cheung]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Use Presenters in Rails]]></title>
    <link href="http://ryancheung.github.com/blog/2012/11/11/use-presenters-in-rails/"/>
    <updated>2012-11-11T21:44:00+08:00</updated>
    <id>http://ryancheung.github.com/blog/2012/11/11/use-presenters-in-rails</id>
    <content type="html"><![CDATA[<p>通常在 Rails App 中我们提倡 fat model skinny controller，但当业务的复杂度不断增加的时候，
也可能会出现 fat controller 或者 fat view 的情况。例如 NICE-Program 减重方案智能生成项目中，
展示方案的 view 堆积了一堆的展示逻辑，包括如身高体重单位转换、性别文字展示、动态显示设定数量
的减肥建议等:</p>

<pre><code>&lt;tr class="bg0"&gt;
  &lt;td&gt;&lt;b&gt;Sex:&lt;/b&gt; &lt;%= @program.sex_type == "1" ? "Male" : "Female" %&gt;&lt;/td&gt;
  &lt;td&gt;&lt;b&gt;Birthday:&lt;/b&gt; &lt;%= @program.birthday %&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;&lt;b&gt;Height:&lt;/b&gt; &lt;%= cm_to_inch(@program.height) %&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;% if @tip_set.special? %&gt;
  &lt;output class="bg1"&gt;&lt;b&gt;Special conditions&lt;/b&gt;&lt;/output&gt;
  &lt;p&gt;
    &lt;ul&gt;
      &lt;% @tip_set.special_tips[0..4].each do |tip| %&gt;
        &lt;li&gt;&lt;%= tip.try(:html_safe) %&gt;&lt;/li&gt;
      &lt;% end %&gt;
    &lt;/ul&gt;
  &lt;/p&gt;
&lt;% end %&gt;
</code></pre>

<p>这些都是 view 的展示(presentation) 逻辑，这些逻辑多了以后也会变的难以维护。
为了解决这个问题，我们再抽象出一层: Presenters 。</p>

<h2>How it works</h2>

<p>Presenter 模式通过创建一个 class 来表现 view 当状态, 并且把 controller 中的装备 doman model
的逻辑和 view 中的展示逻辑以 OO 的方式包含在其中。</p>

<h2>When to use it</h2>

<p>在一个复杂的 app 中，复杂的 controller action 可能需要装备很多的 model 对象来生成 view，例如
在 NICE 方案展示的 action 中我们需要准备 @user_data, @nice_contract, @program 等对象
来生成 view ，然而我们可以通过 Presenter 来封装聚合 view 所有的数据的逻辑，这样可以让 controller
的职责更单一，而且能方便测试。</p>

<p>在 view 中也会有很多非业务相关的逻辑，如格式化，计算等。这些逻辑放在 view 中会变得难以测试。
Presenter 可以封装这些逻辑来方便测试，并且使我们的 view 变得更清晰。</p>

<h2>How to use it</h2>

<h3>The Decorator Pattern</h3>

<p><img src="/images/decorator_uml.png"></p>

<p>Decorator 模式，顾名思义就是装饰对象，即向对象添加额外的功能。它的实现是通过一个对象来包裹一个
现有的对象来添加其他需要的功能，并且以代理的方式提供现有对象的功能。这个恰巧符合 Presenter 的
需求，view 中及需要 model 及业务原本的行为，又需要跟展示相关的行为，因此我们可以添加一个
Decorator 来同时封装业务逻辑和展示逻辑。</p>

<h3>The Refactor</h3>

<p>我们现在可以添加一个 Decorator 来装饰我们的方案对象：</p>

<pre><code>class ProgramDecorator
  def initialize(program)
    @program = program
  end

  # extra display logic
  def sex_type_text
    @program.sex_type == "1" ? "Male" : "Female"
  end

  def height
    cm_to_inch(@program.height)
  end

  ...

  # delegates to @program
  def birthday
    @program.birthday
  end

  def bmi
    @program.birthday
  end

  ...
end
</code></pre>

<p>Controller:</p>

<pre><code>class ProgramsController &lt; ApplicationController
  def show
    @program = ProgramDecorator.new(Program.find(params[:id]))
  end
end
</code></pre>

<p>View:</p>

<pre><code>&lt;tr class="bg0"&gt;
  &lt;td&gt;&lt;b&gt;Sex:&lt;/b&gt; &lt;%= @program.sex_type_text %&gt;&lt;/td&gt;
  &lt;td&gt;&lt;b&gt;Birthday:&lt;/b&gt; &lt;%= @program.birthday %&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;&lt;b&gt;Height:&lt;/b&gt; &lt;%= @program.height %&gt;&lt;/td&gt;
&lt;/tr&gt;
</code></pre>

<p>这样看来 view 就变得短小清晰了</p>

<h3>The Gem</h3>

<p>Github 上有个非常不错的 gem 叫 <a href="https://github.com/drapergem/draper">draper</a>，它可以用来帮助
我们写 Decorator(及 Presenter)，它与 ActiveRecord 深度集成，帮我们封装了代理部分的 API，
在 Decorator 中可以直接使用 model 的 API，并提供了 view_helper 来方便编写展示相关逻辑。</p>

<h2>Wrap Up</h2>

<p>相比直接把代码散步在 controller 和 view 中，使用 Presenter 有几点优势：</p>

<ul>
<li>controller 和 view 的代码短小清晰，职责分明</li>
<li>方便测试</li>
<li>使用 OO 方式代替 view helpers，便于维护和扩展</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用 Nginx+Unicorn 配置 Rails App Server]]></title>
    <link href="http://ryancheung.github.com/blog/2012/10/28/shi-yong-nginx-plus-unicorn-pei-zhi-rails-app-server/"/>
    <updated>2012-10-28T13:16:00+08:00</updated>
    <id>http://ryancheung.github.com/blog/2012/10/28/shi-yong-nginx-plus-unicorn-pei-zhi-rails-app-server</id>
    <content type="html"><![CDATA[<p>Unicorn 是一个非常不错的 Ruby HTTP Server。它是被设计用来给客户端提供低延迟、
高带宽连接的服务，而且它利用了 Unix/类Unix 内核的特性优势。
目前很多使用 Rails 的大型网站如 Twitter, Github 等都在使用它。</p>

<p>下面我想先从几个方面讲下 Unicorn 的设计，然后在看怎么配合 Nginx 配置 Rails server。</p>

<h2>设计</h2>

<p><img src="/images/angry_unicorn.png"></p>

<p>Unicorn 中文及独角兽或麒麟的意思，名字听起来就很霸气。下面是它的架构:</p>

<p><img src="/images/unicorn_arthitechture.png"></p>

<p>Nginx 通过一个共享的 Unix Domain Socket(或者 TCP) 将请求重定向到 Unicorn 的 worker 进程池。
Unicorn 的 master 进程则管理这些 worker 进程并且由操作系统来处理负载均衡。
而 master 进程自己不负责任何请求。每个 master 可以使用不同版本的 Ruby 启动，
因此同台机器上其每个 Rails app 可以使用不同版本的 Ruby。</p>

<p>下面是个 nginx.conf 部分配置:</p>

<pre><code>upstream app_server {
  # for UNIX domain socket setups:
  server unix:/tmp/.sock fail_timeout=0;

  # for TCP setups, point these to your backend servers
  # server 192.168.0.7:8080 fail_timeout=0;
  # server 192.168.0.8:8080 fail_timeout=0;
  # server 192.168.0.9:8080 fail_timeout=0;
}
</code></pre>

<p>当 Unicorn master 进程启动时，它把 app 和 gems 加载到内存。
完成后再 fork 出 worker 进程。不同 worker 进程间的负载均衡由操作系统负责。
所有 workers 共享一套监听 sockets 并且对他们调用非阻塞 accept()，
系统内核决定把 socket 给哪个 worker。如果没有 socket 需要 accept()，worker 将 sleep。</p>

<h3>慢请求</h3>

<p>Unicorn master 进程准确知道每个 worker 处理一个请求需要多久。
如果某个 worker 超过30秒(默认配置为30秒)响应请求，
master 进程会立即 kill 掉这个 worker 并且 fork 出一个新的，
这个新创建的worker 可以立即响应请求。worker 被 fork 出的时间是非常短的，
所以不需要花费数秒来等待进程启动。</p>

<p>当这种慢请求发生后，客户端收到 502 错误页面。这个表示请求在处理完成之前被 kill 掉了。</p>

<p>这种处理机制防止了慢请求的产生。</p>

<h3>内存增长</h3>

<p>当某个 worker 使用了过多的内存，外部监控程序如 monit 可以向它发送 QUIT 信号量。
这个将在完成当前的请求后结束掉这个 worker。当 worker 完成请求并结束掉后，
master 进程 fork 出一个新的 worker，并能立即处理请求。
这种方式下我们避免了在请求未完成而被 kill 掉和花费数秒来重启 server。</p>

<h3>部署</h3>

<p>Unicorn 另一精妙之处在于它完成实现零宕机部署，来看它是怎么做的。</p>

<p>首先我们向当前正在服务的 Unicorn master 进程发送一个 USR2 信号量。
这个告诉它开始启动一个新的 master 进程，reloading 所有 app 代码。
新 master 进程完全加载后，它开始 fork 出其需要的 worker 进程。
第一个 worker 发现还有个旧的 master，然后向它发送 QUIT 信号量。</p>

<p>旧 master 进程收到 QUIT 信号量后，它开始优雅的关闭其 workers 。
一旦所有的 workers 完成请求后，旧 master 进程结束。此时我们有了全新的 app 来服务请求，
不需要任何宕机时间。</p>

<p>同样的，可以使用这个方式来更新 Unicorn 它自己。</p>

<h3>重启</h3>

<p>就像上面提到的，重启只会在 master 进程需要重启的时候变慢。
Worker 被 kill 或 fork 的速度是相当快的。</p>

<p>当我们需要重启的时候，只有 master 进程需要重新加载所有 app 代码，
不像其他 server 可能所有进程都需要重新加载所有 app 代码。</p>

<h2>Nginx+Unicorn 配置</h2>

<p>首先在 Gemfile 中添加 unicorn:</p>

<pre><code>gem 'unicorn'
</code></pre>

<p>在 config/unicorn.rb 中创建 unicorn 配置。官方 Example 配置文
件在 <a href="https://github.com/defunkt/unicorn/blob/master/examples/unicorn.conf.rb">github unicorn</a></p>

<p>在这里可以配置监听端口，如：</p>

<pre><code>listen 3032, :tcp_nopush =&gt; false
</code></pre>

<p>配置 worker 进程数量:</p>

<pre><code>if rails_env == "production"
  worker_processes 6
else
  worker_processes 1
end
</code></pre>

<p>配置进程ID和日志：</p>

<pre><code>pid "#{Rails.root}/tmp/pids/unicorn.pid"
stderr_path "#{Rails.root}/log/unicorn.log"
stdout_path "#{Rails.root}/log/unicorn.log"
</code></pre>

<p>还很多其他的配置可以参考官方文档或 Examle 文件里的注释。</p>

<p>然后启动 unicorn:</p>

<pre><code>bundle exec unicorn -D -c config/unicorn.rb
</code></pre>

<p>现在配置 nginx.conf:</p>

<pre><code>server {
  listen 80; # for Linux
  server_name slim.bh.com;
  root /home/ryan/ror-apps/nice-slim/public;

  location @app {
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header Host $http_host;
    proxy_redirect off;

    proxy_pass http://127.0.0.1:3032;
  }
</code></pre>

<p>注意 proxy_pass 设置为 unicorn app 的地址，这样 nginx 就能以 proxy 方式将请求发送到 unicorn。</p>

<p>关于 unicorn.sh 启动脚本，这个脚本方便我们对 unicorn 进行 start, stop,
restart 等操作，这个 unicorn github 本版库也有个 <a href="https://github.com/defunkt/unicorn/blob/master/examples/init.sh">unicorn.sh</a></p>
]]></content>
  </entry>
  
</feed>
