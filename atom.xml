<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Ryan's Blog]]></title>
  <link href="http://ryancheung.github.com/atom.xml" rel="self"/>
  <link href="http://ryancheung.github.com/"/>
  <updated>2012-10-14T22:02:26+08:00</updated>
  <id>http://ryancheung.github.com/</id>
  <author>
    <name><![CDATA[Ryan Cheung]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ajax In Rails 3]]></title>
    <link href="http://ryancheung.github.com/blog/2012/10/14/ajax-in-rails-3/"/>
    <updated>2012-10-14T20:00:00+08:00</updated>
    <id>http://ryancheung.github.com/blog/2012/10/14/ajax-in-rails-3</id>
    <content type="html"><![CDATA[<p>我们在使用 <code>link_to</code> 和 <code>form_for</code> API的时候经常会看到一个参数
 <code>:remote =&gt; true</code> ，这个参数是做什么用的呢？在阅读文档后发现
它是用来做 AJAX 异步调用的。虽然知道它是，但在使用 rails 这
么长时间一直都不知道怎么去用这个参数，直到这周的开发工作中
不得不使用 AJAX，因此我去详细了解了下怎么去使用 <code>:remote</code> 这
个参数。了解如何使用后发现 rails 中使用 remote 链接或表单
来做 AJAX 调用真的非常方便。下面我就分享下怎么去使用它。</p>

<p>我们可以看到，Rails 项目默认生成后 assets 目录的 application.js
 文件中会有一下两行</p>

<pre><code>//= require jquery
//= require jquery_ujs
</code></pre>

<p>Rails 3 就是用这个 jquery_ujs.js 文件来驱动使用
 <code>:remote =&gt; true</code> 参数生存的异步链接和表单的。</p>

<h2>jquery_ujs 做了什么</h2>

<ol>
<li><p>它会找出所有 remote 链接和表单并重写 <code>click</code> 事件来使他们
使用 AJAX 的方式提交到服务器</p></li>
<li><p>它会触发5个 javascript 事件，通过绑定回调来处理 AJAX 返回
结果</p></li>
</ol>


<p>在 Rails 2 中，实现异步链接或表单的方式是使用 <code>link_to_remote</code>
 和 <code>remote_form_for</code> ，这2个 API 可以设置 update 等参数去处理
返回结果，但在 Rails 3 中这2个 API 也被抛弃，而且返回结果只能
我们手动去处理。</p>

<h2>HTML 5</h2>

<p>remote 链接和表单使用 Unobstrusive Javascript 方式来生成 HTML。
它会在生成的 <code>a</code> 和 <code>form</code> 标签中生成 <code>data-remote</code> 属性。这个
是有效的 HTML5 属性。jquery_ujs 正是判断这个属性来设置
其 AJAX 行为。 Unobstrusive JavaScript(不唐突的 javascript )，
这个东西的主要作用一个是将页面的行为和内容展现分离，另外一个更
关键的是 它可以减少 javascript 编写。也正是他方便 AJAX 的实现。
来看个例子:</p>

<pre><code>&lt;%= link_to "修改", { action: "edit_struct", evaluation_input_id: @evaluation_input.id, type: the_type }, remote: true %&gt;
</code></pre>

<p>将生成</p>

<pre><code>&lt;a href="http://ryancheung.github.com/admin/solutions/edit_struct?evaluation_input_id=1&amp;amp;type=solution" data-remote="true"&gt;修改&lt;/a&gt;
</code></pre>

<h2>处理 AJAX 返回</h2>

<p>AJAX 返回结果有两中处理方式：</p>

<ol>
<li><p>通过绑定上面提到的 javascript 事件的回调来更新页面的HTML</p></li>
<li><p>通过 server 直接返回的 javascript 来更新页面</p></li>
</ol>


<p>先来看第一种方式，当 jquery_ujs 将请求发送到 server 的时候，在
整个请求发送的前后它会触发5个事件。</p>

<p>这个5个事件是:</p>

<pre><code>ajax:before
ajax:beforeSend
ajax:success
ajax:error
ajax:complete
</code></pre>

<p>因此在页面中，我们可以绑定回调方法来处理返回结果，例如：</p>

<pre><code>$('#edit_struct').bind('ajax:success', function(data) {
    $('#solution_struct').html(data);
    });
</code></pre>

<p>第二中方式也是很简单，server 只需要返回更新 js 来让浏览器执行。
这是我们需要用到 js.erb 视图模版。</p>

<p>下面是 NICE Slim 中的一个例子。在方案编辑页面中需要可以在本页
编辑饮食结构：</p>

<p><img src="http://ryancheung.github.com/images/nice_slim_1.png"></p>

<p>点击<em>修改</em>按钮后变成：</p>

<p><img src="http://ryancheung.github.com/images/nice_slim_2.png"></p>

<p>在控制器中，我们需要添加 js 的返回格式</p>

<pre><code>class Admin::SolutionsController &lt; Admin::BaseController
  def edit_struct
    render format: :js, layout: false
  end
end
</code></pre>

<p>视图 edit_struct.js.erb</p>

<pre><code>$("solution_struct").html("&lt;%= escape_javascript(render 'edit_struct') %&gt;");
</code></pre>

<p>这里是添加了个 <code>_edit_struct.html.erb</code> partial 来生成编辑用的HTML</p>

<p>这2种方式各有优劣，第一种可以在前端可以方便处理请求完
成的各种情况， 如处理请求失败后的处理，而第2中方式前
端只能处理请求成功后的情况。当然第2中方式可以在后台使用 partial
来方便生成返回的 HTML 内容。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[services]]></title>
    <link href="http://ryancheung.github.com/blog/2012/09/16/services/"/>
    <updated>2012-09-16T22:36:00+08:00</updated>
    <id>http://ryancheung.github.com/blog/2012/09/16/services</id>
    <content type="html"><![CDATA[<h2>服务</h2>

<p>通常在我们做模型设计的时候，我们会根据实际业务抽象出很
多业务对象，然后再确定业务对象的状态和行为。一般的，在
业务的通用语言中，我们把名词考虑作为业务对象，如&#8221;用户&#8221;
；把动词考虑作为业务对象的行为，如&#8221;修改密码&#8221;。但在有些
业务中，有些动词的行为不属于任何一个对象，比如&#8221;食谱生
成&#8221;。这类动词代表了业务中一个很重要的行为，而且不能简单
把他们合并到某一个业务实体或则值对象当中。 给一个对象增
加这样的行为只会破坏该对象的职责，只是让它开起来拥有某
个功能。通常，这类行为的类会跨越若干个对象，或者是不同
的类。例如，在食谱生成中，食物数据源、营养份数结构和用
户的饮食偏好等作为输入，然后通过一系列逻辑来生成食谱。
这个功能是放在食物对象还是用户对象上呢，好像一个都不合
适。再举一个简单点的例子，银行系统中， 从一个账户向另
外一个账户转钱，这个功能是放在转出的帐户还是转出的帐户
中呢？感觉哪个都不合适。</p>

<p>就这样，当我们发现业务领域中有这样的行为时，我们的最好
的做法就是将他们声明为<strong>服务</strong>。服务一般没有状态，但有
时可以存放一些在业务执行时候的一些临时状态。服务代表了
业务领域中的一个清晰的特性。比如，食谱生成、食谱替换、
单位替换等每一个服务都代表了食谱业务的每一个特性。如果
把这样的功能放到某个业务实体或者值对象都会导致混乱。因
为这样将使这些对象的职责变得不清楚，对象间将建立密集的
关系网。高度耦合是糟糕设计的信号，这将大大降低代码可读
性，从而增加维护难度。</p>

<p>当然，服务也不应该是对通常属于业务对象的行为的代替。不
因该为每一个需要的行为或操作来抽象成一个服务。但当一个
行为突显为一个业务中的重要概念或特性时，就需要为他创建
一个服务。以下是服务的3个特性：</p>

<ol>
<li><p>服务执行的操作涉及业务中一个重要的概念， 这个概念通常
不属于某一个业务实体或值对象。</p></li>
<li><p>被执行操作涉及业务中其他对象</p></li>
<li><p>操作是无状态的</p></li>
</ol>


<p>服务也分领域模型(Domain)服务和基础设施(Infrustracture)
服务。这个区分也很重要。例如， 一个食谱生成服务就是领域
模型服务，因为他涉及到其他业务对象，如&#8221;用户&#8221;，&#8221;食物&#8221;。
而一个薄荷网发送确定email有效性的email发送服务就属于一
个基础设施服务，因为他要做的只是发送一段HTML到用户的邮
箱，跟其他业务对象没有关系。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用 git flow 工具管理开发流程]]></title>
    <link href="http://ryancheung.github.com/blog/2012/09/02/shi-yong-git-flow-gong-ju-guan-li-kai-fa-liu-cheng/"/>
    <updated>2012-09-02T23:27:00+08:00</updated>
    <id>http://ryancheung.github.com/blog/2012/09/02/shi-yong-git-flow-gong-ju-guan-li-kai-fa-liu-cheng</id>
    <content type="html"><![CDATA[<p>我们都知道, 在 git 的分支功能相对 svn 确实方便许多，而且也非常推荐使用分支来做开发.
我的做法是每个项目都有2个分支, master 和 dev. master 分支是主分支, 保证程序有一个
稳定版本, dev 则是开发用的分支, 几乎所有的功能开发, bug 修复都在这个分支上, 完成后
再合并回 master.</p>

<p>但是情况并不是这么简单. 有时当我们正在开发一个功能, 但程序突然出现
 bug 需要及时去修复的时候, 这时要切回 master 分支, 并基于它创建一个 hotfix 分支.
有时我们在开发一个功能时, 需要停下来去开发另一个功能. 而且所有这些问题都出现
的时候, 发布也会成为比较棘手问题.</p>

<p>也就是说, git branch 功能很强大，但是没有一套模型告诉我们应该怎样在开发的时候善用
这些分支。于是有人就整理出了一套比较好的方案
<a href="http://nvie.com/posts/a-successful-git-branching-model/">A successful Git branching model</a>,
今天我们就一起来学习下这套方案.</p>

<p>简单来说, 他将 branch 分成2个主要分支和3个临时的辅助分支:
<img src="http://nvie.com/img/2009/12/Screen-shot-2009-12-24-at-11.32.03.png" alt="git flow" /></p>

<p><strong>主要分支</strong></p>

<ul>
<li>master: 永远处在即将发布(production-ready)状态</li>
<li>develop: 最新的开发状态</li>
</ul>


<p><strong>辅助分支</strong></p>

<ul>
<li>feature branches: 开发新功能的分支, 基于 develop, 完成后 merge 回 develop</li>
<li>release branches: 准备要发布版本的分支, 用来修复 bug. 基于 develop, 完成后 merge 回 develop 和 master</li>
<li>hotfix branches: 修复 master 上的问题, 等不及 release 版本就必须马上上线. 基于 master, 完成后 merge 回 master 和 develop</li>
</ul>


<p>作者还提供了 <code>git-flow</code> 命令工具:</p>

<p>首先初始化:</p>

<pre><code>git flow init
</code></pre>

<p>初始化动作会让你设置这些分支的命名, 默认就好:</p>

<pre><code>No branches exist yet. Base branches must be created now.
Branch name for production releases: [master]
Branch name for "next release" development: [develop]
How to name your supporting branch prefixes?
Feature branches? [feature/]
Release branches? [release/]
Hotfix branches? [hotfix/]
Support branches? [support/]
Version tag prefix? []
</code></pre>

<p>完成后当前所在分支就变成 develop. 任何开发都必须从 develop 开始:</p>

<pre><code>git flow feature start some_awesome_feature
</code></pre>

<p>完成功能开发之后:</p>

<pre><code>git flow feature finish some_awesome_feature
</code></pre>

<p>这时就会合并回 develop 并删除这个 some_awesome_feature 分支</p>

<p>将一个 feature 分支推到远程服务器:</p>

<pre><code>git flow feature publish some_awesome_feature
或者
git push origin feature/some_awesome_feature
</code></pre>

<p>track 一个远程分支:</p>

<pre><code>git flow feature track some_awesome_feature
或者
git checkout -b feature/some_awesome_feature -t origin/feature/some_awesome_feature
</code></pre>

<p>关于 commit:</p>

<p>分支在 merge 回 develop 或 master 的时候都会添加 &#8211;no-ff  参数, 这样做有个好处就是,
每一次的 merge 就代表一个功能完成, 可以清晰地看到这个功能开发下的每个提交历史.</p>

<p>最后 git flow in github: <a href="https://github.com/nvie/gitflow">https://github.com/nvie/gitflow</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[hello world]]></title>
    <link href="http://ryancheung.github.com/blog/2012/08/01/hello-world/"/>
    <updated>2012-08-01T23:52:00+08:00</updated>
    <id>http://ryancheung.github.com/blog/2012/08/01/hello-world</id>
    <content type="html"><![CDATA[<h2>Hello world</h2>

<p>puts &#8220;Hello, world!&#8221;</p>
]]></content>
  </entry>
  
</feed>
